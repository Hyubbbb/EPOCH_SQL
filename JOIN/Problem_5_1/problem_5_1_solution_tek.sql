-- 프로그래머스 그룹별 조건에 맞는 식당 목록 출력하기
-- https://school.programmers.co.kr/learn/courses/30/lessons/131124


-- 첫 번째 풀이

-- SELECT MP.MEMBER_NAME, RR.REVIEW_TEXT, DATE_FORMAT(RR.REVIEW_DATE, "%Y-%m-%d") AS REVIEW_DATE
-- FROM MEMBER_PROFILE AS MP
-- INNER JOIN REST_REVIEW AS RR
--     ON MP.MEMBER_ID = RR.MEMBER_ID
-- WHERE RR.MEMBER_ID IN (
--     SELECT R.MEMBER_ID
--     FROM (
--         -- 윈도우 함수 Rank를 통해 Count(M.MEMBER_ID) 순위 표시 
--         SELECT M.MEMBER_ID, M.MEMBER_NAME, COUNT(M.MEMBER_ID) AS CNT,
--             RANK() OVER (ORDER BY COUNT(M.MEMBER_ID) DESC) AS RANKING
--         FROM MEMBER_PROFILE AS M
--         INNER JOIN REST_REVIEW AS R
--             ON M.MEMBER_ID = R.MEMBER_ID
--         GROUP BY M.MEMBER_ID, M.MEMBER_NAME) AS R
--     -- Inline View에서 가져온 Rank 함수 통해 1등 조건 걸어줌
--     WHERE R.RANKING = 1
-- )
-- ORDER BY RR.REVIEW_DATE, RR.REVIEW_TEXT


-- 두 번째 풀이

-- SELECT  C.MEMBER_NAME, RR.REVIEW_TEXT, 
--     DATE_FORMAT(RR.REVIEW_DATE, "%Y-%m-%d") AS REVIEW_DATE
-- FROM (
--     -- GROUP BY 통해 리뷰 개수 카운팅
--     SELECT M.MEMBER_ID, M.MEMBER_NAME, COUNT(*) AS CNT
--     FROM MEMBER_PROFILE AS M
--     INNER JOIN REST_REVIEW AS R
--         ON M.MEMBER_ID = R.MEMBER_ID
--     GROUP BY M.MEMBER_ID, M.MEMBER_NAME
--     ORDER BY CNT DESC
--     ) AS C
-- JOIN REST_REVIEW AS RR
--     ON C.MEMBER_ID = RR.MEMBER_ID
-- -- 리뷰 개수 가장 많은 것 필터링
-- WHERE C.CNT = (
--     SELECT COUNT(*) AS CNT
--     FROM MEMBER_PROFILE AS M
--     INNER JOIN REST_REVIEW AS R
--         ON M.MEMBER_ID = R.MEMBER_ID
--     GROUP BY M.MEMBER_ID, M.MEMBER_NAME
--     ORDER BY CNT DESC
--     LIMIT 1
-- )
-- ORDER BY RR.REVIEW_DATE, RR.REVIEW_TEXT

-- 최종 풀이
SELECT M.MEMBER_NAME, C.REVIEW_TEXT, 
    DATE_FORMAT(C.REVIEW_DATE, "%Y-%m-%d") AS REVIEW_DATE
FROM (
    -- 윈도우 함수 COUNT 통해 리뷰 개수 카운팅 (리뷰 내용 보존 목적)
    SELECT *, COUNT(REVIEW_TEXT) OVER (PARTITION BY MEMBER_ID) AS CNT
    FROM REST_REVIEW AS R
    ) AS C
INNER JOIN MEMBER_PROFILE AS M
    ON C.MEMBER_ID = M.MEMBER_ID
-- 내림차순으로 리뷰 개수 정렬한 것 중 가장 상위의 1개 (최대값)만 가져와서 필터링
WHERE C.CNT = (
                SELECT COUNT(REVIEW_TEXT) OVER (PARTITION BY MEMBER_ID) AS CNT
                FROM REST_REVIEW AS R
                ORDER BY CNT DESC
                LIMIT 1
              ) 
ORDER BY C.REVIEW_DATE, C.REVIEW_TEXT
